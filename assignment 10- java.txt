# Assignment Questions 10

<aside>
ðŸ’¡ ****Q1.What is the Spring MVC framework?****

</aside>

<aside>
ðŸ’¡ ****Q2.What are the benefits of Spring MVC framework over other MVC frameworks?****

</aside>

<aside>
ðŸ’¡ ****Q3.What is DispatcherServlet in Spring MVC? In other words, can you explain the Spring MVC architecture?****

</aside>

<aside>
ðŸ’¡ ****Q4.What is a View Resolver pattern and explain its significance in Spring MVC?****

</aside>

<aside>
ðŸ’¡ ****Q5.What are the differences between @RequestParam and @PathVariable annotations?****

</aside>

<aside>
ðŸ’¡ ****Q6.What is the Model in Spring MVC?****

</aside>

<aside>
ðŸ’¡ ****Q7.What is the role of @ModelAttribute annotation?****

</aside>

<aside>
ðŸ’¡ ****Q8.What is the significance of @Repository annotation?****

</aside>

<aside>
ðŸ’¡ **Q9.What does REST stand for? and what is RESTful web services?**

</aside>

<aside>
ðŸ’¡ **Q10.What is differences between RESTful web services and SOAP web services?**

</aside>

answers-

1. **Spring MVC Framework:**
   - The Spring MVC (Model-View-Controller) framework is a part of the Spring Framework and is used for building web applications. It follows the MVC design pattern, where Model represents the application's data and business logic, View is responsible for rendering the user interface, and Controller handles user requests, processes them, and interacts with the Model and View.

2. **Benefits of Spring MVC:**
   - Loose coupling: Components are loosely coupled, making it easier to maintain and test.
   - Modular: Supports modular development with reusable components.
   - Extensible: Offers various extension points to customize behavior.
   - Testability: Controller and services can be unit-tested easily.
   - Integration: Seamlessly integrates with other Spring modules.

3. **DispatcherServlet and Spring MVC Architecture:**
   - The DispatcherServlet is the front controller in the Spring MVC framework. It receives incoming requests, processes them, and delegates them to the appropriate controllers. It plays a central role in the Spring MVC architecture, ensuring proper flow control and handling of requests.

4. **View Resolver Pattern:**
   - View Resolver is a design pattern used in Spring MVC to map logical view names (returned by controllers) to actual view implementations. It helps decouple the controller from the view, making it easy to switch between different view technologies (e.g., JSP, Thymeleaf).

5. **@RequestParam vs. @PathVariable:**
   - `@RequestParam` is used to extract query parameters from the request URL. It's suitable for parameters passed as part of the URL query string.
   - `@PathVariable` is used to extract values from URI templates (parts of the URL enclosed in curly braces {}). It's suitable for extracting values from the URL path.

6. **Model in Spring MVC:**
   - The Model in Spring MVC represents the application's data and business logic. It holds the data that needs to be displayed or processed in the view. The Model is usually a POJO (Plain Old Java Object) and is managed by the framework.

7. **@ModelAttribute Annotation:**
   - The `@ModelAttribute` annotation is used to bind a method's return value to a model attribute. It can be used in controller methods to add common attributes to the model for multiple views.

8. **@Repository Annotation:**
   - The `@Repository` annotation is used to indicate that a class is a repository (data access object) in Spring. It enables Spring to automatically handle exceptions and provide persistence-related functionality.

9. **REST and RESTful Web Services:**
   - REST stands for Representational State Transfer. It is an architectural style for designing networked applications. RESTful web services are services that adhere to the principles of REST. They use standard HTTP methods (GET, POST, PUT, DELETE) for operations and represent resources as URLs.

10. **Differences Between RESTful and SOAP Web Services:**
    - RESTful services use lightweight formats like JSON and XML for data exchange, while SOAP services use XML.
    - RESTful services rely on HTTP for communication, whereas SOAP can use various protocols.
    - RESTful services are stateless, while SOAP can have stateful operations.
    - RESTful services are simpler and more lightweight, making them suitable for public APIs.
    - SOAP services offer more built-in features like security and transactions.

